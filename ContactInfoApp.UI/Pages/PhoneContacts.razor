@page "/phone-contacts"
@using ContactInfoApp.UI.Model
@using ContactInfoApp.UI.Interfaces
@using ContactInfoApp.UI.ViewModels

<h3>Недавние вызовы</h3>

@if (_groupedCallLogs != null)
{
    foreach (var groupedCallLog in _groupedCallLogs)
    {
        <h6 class="mt-1">@groupedCallLog.Date.ToLongDateString()</h6>
        <RadzenDataList Data="@groupedCallLog.CallLogs" TItem="GroupedPhoneNumberViewModel">
            <Template Context="groupedPhoneNumber">
                @{
                    var callLog = groupedPhoneNumber.CallLog;
                }
                <div class="container pr-0">
                    <div class="row">
                        <div class="col">
                            <div class="row">
                                @if (!string.IsNullOrEmpty(callLog.CallName))
                                {
                                    @callLog.CallName
                                }
                                else
                                {
                                    @callLog.CallNumber
                                }
                                @if (groupedPhoneNumber.Count > 1)
                                {
                                    @($" ({groupedPhoneNumber.Count})")
                                }
                            </div>
                            <div class="row">
                                @switch (callLog.CallType)
                                {
                                    case "Incoming":
                                        <RadzenIcon Icon="call_made"></RadzenIcon>
                                        break;
                                    case "Outgoing":
                                        <RadzenIcon Icon="call_received"></RadzenIcon>
                                        break;
                                    case "Blocked":
                                        <RadzenIcon Icon="block" class="text-danger"></RadzenIcon>
                                        break;
                                }
                                &nbsp;&bull; @callLog.CallDate.ToString("ddd, HH:mm")
                            </div>
                        </div>
                        <div class="col-auto d-flex">
                            <div class="align-self-center">
                                <RadzenButton Click="args => GetContactInfoClick(args, callLog)" Icon="info"/>
                            </div>
                        </div>
                    </div>
                </div>
            </Template>
        </RadzenDataList>
    }
}
else
{
    <div class="spinner"></div>
}

@code {
    private IEnumerable<GroupedCallLogViewModel> _groupedCallLogs;

    [Inject] private NavigationManager NavigationManager { get; set; }

    [Inject] private ICallLogService CallLogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var callLogs = CallLogService.GetCallLogs().ToList();

        foreach (var callLog in callLogs)
        {
            callLog.CallDate = callLog.CallDate.ToLocalTime();
        }

        _groupedCallLogs = callLogs
            .GroupBy(g => g.CallDate.Date)
            .Select(x => new GroupedCallLogViewModel
            {
                Date = x.Key,
                CallLogs = x
                    .GroupBy(g => g.CallNumber)
                    .Select(xx => new GroupedPhoneNumberViewModel
                    {
                        Count = xx.Count(),
                        CallLog = xx.FirstOrDefault()
                    })
            });
    }

    private void GetContactInfoClick(MouseEventArgs e, CallLogModel callLog)
    {
        NavigationManager.NavigateTo($"/home/{callLog.CallNumber}");
    }
}
